package rules

import com.vincent.entity.*;

//// Customer对象orderList属性包含Order对象
//rule "rule_1"
//    when
//        $order:Order();
//        $customer:Customer(orderList contains $order);
//    then
//        System.out.println("触发规则 orderList 包含 $order");
//end
//
//// Customer对象orderList属性不包含Order对象
//rule "rule_2"
//    when
//        $order:Order()
//        $customer:Customer(orderList not contains $order)
//    then
//        System.out.println("触发规则 orderList 不包含 $order");
//end
//
//// 测试比较操作符matchs
//rule "rule_3"
//    when
//        Customer(name matches "张.*");
//    then
//        System.out.println("测试比较操作符matchs触发");
//end
//
//
//// 测试比较操作符matchs
//rule "rule_4"
//    when
//        Customer(name not matches "张.*");
//    then
//        System.out.println("测试比较操作符not matchs触发");
//end

// insert
//rule "rule_5"
//    when
//        eval(true); // 默认成立
//    then
////        Customer customer = new Customer();
////        customer.setName("张三");
////        insert(customer);
//        System.out.println("调试drools提供的内置方法insert 触发...");
//end
//
//rule "rule_6"
//    when
//        $customer:Customer(name == "张三")
//    then
//        System.out.println("测试Drools提供的内置方法insert 触发..."+$customer.getName());
//end

// update
//rule "rule_7"
//    no-loop true // 避免死循环
//    when
//        $customer:Customer(name == "李四")
//    then
//        $customer.setName("张三");
//        update($customer)
//        System.out.println("调试drools提供的内置方法update 触发...");
//end
//
//rule "rule_8"
//    when
//        $customer:Customer(name == "张三")
//    then
//        System.out.println("测试Drools提供的内置方法insert 触发..."+$customer.getName());
//end

// retract 删除工作内存中的数据，并让相关的规则重新匹配
//rule "rule_9"
//    when
//        $customer:Customer(name == "李四")
//    then
////        retract($customer)
//        System.out.println("调试drools提供的内置方法retract 触发...");
//end
//
//rule "rule_10"
//    when
//        $customer:Customer()
//    then
//        System.out.println("调试drools提供的内置方法retract 触发..."+$customer.getName());
//end